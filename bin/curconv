#!/usr/bin/env ruby
# encoding: utf-8

require 'net/http'
require 'pstore'

# Convert currencies with information retrieved from the network and cache the
# answers.
class Convertor
	def initialize
		@cache = PStore.new(File.join(Dir.home, '.curconv-data'), true)
	end

	# Convert +amount+ units of the currency +from_cur+ to the currency +to_cur+.
	def convert(from_cur, to_cur, amount)
		amount * get_rate(from_cur, to_cur)
	end

	# Get the conversion rate between +from_cur+ and +to_cur+. If +use_cache+ is
	# +true+, the rate will be fetched from the network; if it is +false+, the
	# rate will never be fetched from the network, and +nil+ will be returned if
	# no rate is available; if it is +nil+, the rate will be fetched from the
	# network iff it hasn't been fetched in the last 24 hours.
	def get_rate(from_cur, to_cur, use_cache=nil)
		rate, fetched = @cache.transaction{ @cache[[from_cur, to_cur]] }

		case use_cache
			when true
				rate

			when false
				fetch_and_set_rate(from_cur, to_cur)

			when nil
				if fetched and (fetched > (Time.now - 86400))
					rate
				else
					fetch_and_set_rate(from_cur, to_cur)
				end

			else
				raise(ArgumentError, 'use_cache must be true, false, or nil')
		end
	end

	# Fetch and set the conversion rate from +from_cur+ to +to_cur+, and return
	# that rate.
	def fetch_and_set_rate(from_cur, to_cur)
			rate = fetch_rate(from_cur, to_cur)
			set_rate(from_cur, to_cur, rate)

			rate
	end

	# Fetch the conversion rate between +from_cur+ and +to_cur+.
	def fetch_rate(from_cur, to_cur)
		from_cur, to_cur = [from_cur, to_cur].map(&:to_s)
		unless [from_cur, to_cur].all?{|c| c =~ /\A[A-Z]{3}\z/}
			raise(ArgumentError, 'currencies must be a three letter currency code')
		end

		con = Net::HTTP.new('www.google.com', 443)
		con.use_ssl = true

		query = "#{from_cur} to #{to_cur}"
		resp = con.get("/ig/calculator?#{URI.encode_www_form(hl: :en, q: query)}")

		if (resp.code_type != Net::HTTPOK) or (/error: ".+"/ =~ resp.body)
			raise('there was an error fetching the conversion rate')
		end

		result = resp.body.match(/rhs: "([\d\.]+) /)[1]
		unless result
			raise('there was an error parsing the server response')
		end

		result.to_f
	end

	# Set the conversion rate between +from_cur+ and +to_cur+ to +rate+.
	def set_rate(from_cur, to_cur, rate)
		@cache.transaction do
			@cache[ [from_cur, to_cur] ] = [rate, Time.now]
		end

		nil
	end
end

if $PROGRAM_NAME == __FILE__
	use_cache, set = nil, false

	case ARGV[0]
		when '--skip-cache'
			use_cache = false
			ARGV.shift()

		when '--cache-only'
			use_cache = true
			ARGV.shift()

		when '--set'
			set = true
			ARGV.shift()
	end

	from_cur, to_cur, amount = ARGV
	amount ||= '1'
	amount = amount.gsub(',', '').to_f

	c = Convertor.new

	if set
		c.set_rate(from_cur, to_cur, amount)
		exit()
	end

	begin
		if c.get_rate(from_cur, to_cur, use_cache) == nil
			warn("The rate between #{from_cur} and #{to_cur} isn't in our cache.")
			exit(1)
		end

		res = c.convert(from_cur, to_cur, amount)
	rescue StandardError => ex
		warn(ex.message)
		exit(1)
	end

	# Show more decimal places when amounts are low.
	if (res <= 0.1) or (amount <= 0.1)
		format_str = "%s %.4f = %s %.4f"
	else
		format_str = "%s %.2f = %s %.2f"
	end

	puts(format_str % [from_cur, amount, to_cur, res])
end
